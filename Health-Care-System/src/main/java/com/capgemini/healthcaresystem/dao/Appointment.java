package com.capgemini.healthcaresystem.dao;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import com.fasterxml.jackson.annotation.JsonIgnore;
/*
 * This Appointment class is used by the patient to create the appointment
 * 
 * author: Ruchita 
 */

@Entity
	public class Appointment {
		/**
		 * id of project , primary key and autogenerated
		 */
		@Id
		@GeneratedValue(strategy = GenerationType.IDENTITY)
		private int id;
		/**
		 * date at which appointment is taken
		 */
		//@JsonFormat(pattern="yyyy-MM-dd")
		private LocalDate appointmentDate=LocalDate.now();
		/**
		 * approval status from admin
		 */
		private String approvalStatus;
		/**
		 * selection of diagnostic test, one to many
		 */
		
		@ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.REFRESH)
		@JoinColumn(name = "patient_id", updatable = false, nullable = false)
		@JsonIgnore
		private Patient patient = null;
		
		/**
		 * selection of Test Result, one to many mapping
		 */
		
		@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER,mappedBy = "appointment")
		//@JoinColumn(name = "tesresultid", updatable = false, nullable = false)
		//private TestResult testResult;
		private List<TestResult> testresults =  new ArrayList<>();
		
		/**
		 * selection of Diagnostic Center, one to one
		 *  mapping
		 */
		@OneToOne(fetch = FetchType.EAGER)
		@JoinColumn(name="diagnosticCenterId", nullable = false)
		@JsonIgnore
		private DiagnosticCenter diagnosticCenter;
		
		/**
		 * Constructor without arguments
		 *
		 */
		public Appointment() {
			super();
		}
		/*
		 * Getters and Setters
		*/
		public List<TestResult> getTestresults() {
			return testresults;
		}
		public void setTestresults(List<TestResult> testresults) {
			this.testresults = testresults;
		}
		
		public int getId() {
			return id;
		}
		public void setId(int id) {
			this.id = id;
		}
		
		public LocalDate getAppointmentDate() {
			return appointmentDate;
		}
		public void setAppointmentDate(LocalDate appointmentDate) {
			this.appointmentDate = appointmentDate;
		}
		public String getApprovalStatus() {
			return approvalStatus;
		}
		public void setApprovalStatus(String approvalStatus) {
			this.approvalStatus = approvalStatus;
		}
		
		public DiagnosticCenter getDiagnosticCenter() {
			return diagnosticCenter;
		}
		public void setDiagnosticCenter(DiagnosticCenter diagnosticCenter) {
			this.diagnosticCenter = diagnosticCenter;
		}
		public void setPatient(Patient patient) {
			this.patient = patient;
		}
		public Patient getPatient() {
			return patient;
		}
		
		
	}
